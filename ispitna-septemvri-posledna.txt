package pack;
import java.io.*;
import java.util.*;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}
class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {

    // Each MapEntry object is a pair consisting of a key (a Comparable
    // object) and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry (K key, E val) {
        this.key = key;
        this.value = val;
    }

    public int compareTo (K that) {
        // Compare this map entry to that map entry.
        @SuppressWarnings("unchecked")
        MapEntry<K,E> other = (MapEntry<K,E>) that;
        return this.key.compareTo(other.key);
    }

    public String toString () {
        return "<" + key + "," + value + ">";
    }
}
class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K,E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K,E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K,E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is
        // equal
        // to targetKey. Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (targetKey.equals(((MapEntry<K, E>) curr.element).key))
                return curr;
        }
        return null;
    }

    public void insert(K key, E val) {		// Insert the entry <key, val> into this CBHT.
        MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (key.equals(((MapEntry<K, E>) curr.element).key) && val.equals(((MapEntry<K, E>) curr.element).value)) {
                // Make newEntry replace the existing entry ...
                curr.element = newEntry;
                return;
            }
        }
        // Insert newEntry at the front of the 1WLL in bucket b ...
        buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b]; curr != null; pred = curr, curr = curr.succ) {
            if (key.equals(((MapEntry<K,E>) curr.element).key)) {
                if (pred == null)
                    buckets[b] = curr.succ;
                else
                    pred.succ = curr.succ;
                return;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            for (SLLNode<MapEntry<K,E>> curr = buckets[i]; curr != null; curr = curr.succ) {
                temp += curr.element.toString() + " ";
            }
            temp += "\n";
        }
        return temp;
    }

}


public class Main{

    public static void main(String[] args) throws IOException{
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        CBHT<String, String> tabela=new CBHT<>(100);
        String s=br.readLine();
        while(!s.equals("#")){
            String[] niza=s.split(",");
            String vrednost=niza[1].substring(1, niza[1].length());
            niza[0]=niza[0].toLowerCase();
            tabela.insert(niza[0], vrednost);
            String[] klucoj=niza[0].split(" ");
            for(int i=0;i<klucoj.length;i++){
                tabela.insert(klucoj[i], vrednost);
            }
            s=br.readLine();
        }
        s=br.readLine();
        int n=Integer.parseInt(s);
        String stranici="";
        for(int i=0;i<n;i++){
            s=br.readLine();
            s=s.toLowerCase();
            if(tabela.search(s)==null){
                stranici+="Not found\n";
            }
            else{
                stranici+=tabela.search(s).element.value+"\n";

            }
        }
        System.out.println(stranici);
    }
}

Se vnesva vo format kako vo primero t.e izraz i broj na strana na koj bi se naogjal, se duri ne se vnesi # i se praj rechnik, t.e se vnesva vo hesh. Potoa se prebaruva so sho se pishi broj na zboroj ili izrazi sho kje se prebarvat i se vnesvat istite. Ako ne se najdi zboro ili izrazo se pechati Not found, a ako se najdi brojot na stranicata na koja se naogja. A postoi zboro ili izrazo samo kako zbor od vlezot sho kje se vnesi ili kako cel izraz napishan, vidi sprema test primero pokje kje sfatish ne znam mn da objasnam.

VLEZ:
Mongol Invasions of Japan, 21
diplomatic relations, 46
Shelter for the Indigent, 29
Vehicle storage, 166
Soldiers, 265
Soviet Union, 193
Engineer-Building Workers team, 288
Medical services, 300
Temporary Rules, 147
Teutonic Knights, 130
Travel Pass, 271
World War II, 236
#
6
diplomatic relations
Japan
Cloud
mongol japan
eNgineer-building Workers team
MEDICAL

IZLEZ:
46
21
Not found
Not found
288
300